// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// adjust-zone.cpp
SEXP adjust_zone_retain_clock_cpp(SEXP x, SEXP zone, SEXP dst_resolver);
extern "C" SEXP _civil_adjust_zone_retain_clock_cpp(SEXP x, SEXP zone, SEXP dst_resolver) {
  BEGIN_CPP11
    return cpp11::as_sexp(adjust_zone_retain_clock_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(zone), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dst_resolver)));
  END_CPP11
}
// adjust.cpp
SEXP adjust_zoned_cpp(SEXP x, SEXP value, SEXP day_resolver, SEXP dst_resolver, SEXP size, SEXP adjuster);
extern "C" SEXP _civil_adjust_zoned_cpp(SEXP x, SEXP value, SEXP day_resolver, SEXP dst_resolver, SEXP size, SEXP adjuster) {
  BEGIN_CPP11
    return cpp11::as_sexp(adjust_zoned_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(value), cpp11::as_cpp<cpp11::decay_t<SEXP>>(day_resolver), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dst_resolver), cpp11::as_cpp<cpp11::decay_t<SEXP>>(size), cpp11::as_cpp<cpp11::decay_t<SEXP>>(adjuster)));
  END_CPP11
}
// adjust.cpp
SEXP adjust_local_cpp(SEXP x, SEXP value, SEXP day_resolver, SEXP size, SEXP adjuster);
extern "C" SEXP _civil_adjust_local_cpp(SEXP x, SEXP value, SEXP day_resolver, SEXP size, SEXP adjuster) {
  BEGIN_CPP11
    return cpp11::as_sexp(adjust_local_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(value), cpp11::as_cpp<cpp11::decay_t<SEXP>>(day_resolver), cpp11::as_cpp<cpp11::decay_t<SEXP>>(size), cpp11::as_cpp<cpp11::decay_t<SEXP>>(adjuster)));
  END_CPP11
}
// arithmetic.cpp
SEXP add_period_to_zoned_cpp(SEXP x, SEXP n, SEXP day_resolver, SEXP dst_resolver, SEXP size, SEXP unit);
extern "C" SEXP _civil_add_period_to_zoned_cpp(SEXP x, SEXP n, SEXP day_resolver, SEXP dst_resolver, SEXP size, SEXP unit) {
  BEGIN_CPP11
    return cpp11::as_sexp(add_period_to_zoned_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(n), cpp11::as_cpp<cpp11::decay_t<SEXP>>(day_resolver), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dst_resolver), cpp11::as_cpp<cpp11::decay_t<SEXP>>(size), cpp11::as_cpp<cpp11::decay_t<SEXP>>(unit)));
  END_CPP11
}
// arithmetic.cpp
SEXP add_duration_to_zoned_cpp(SEXP x, SEXP n, SEXP size, SEXP unit);
extern "C" SEXP _civil_add_duration_to_zoned_cpp(SEXP x, SEXP n, SEXP size, SEXP unit) {
  BEGIN_CPP11
    return cpp11::as_sexp(add_duration_to_zoned_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(n), cpp11::as_cpp<cpp11::decay_t<SEXP>>(size), cpp11::as_cpp<cpp11::decay_t<SEXP>>(unit)));
  END_CPP11
}
// arithmetic.cpp
SEXP add_period_to_local_cpp(SEXP x, SEXP n, SEXP day_resolver, SEXP size, SEXP unit);
extern "C" SEXP _civil_add_period_to_local_cpp(SEXP x, SEXP n, SEXP day_resolver, SEXP size, SEXP unit) {
  BEGIN_CPP11
    return cpp11::as_sexp(add_period_to_local_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(n), cpp11::as_cpp<cpp11::decay_t<SEXP>>(day_resolver), cpp11::as_cpp<cpp11::decay_t<SEXP>>(size), cpp11::as_cpp<cpp11::decay_t<SEXP>>(unit)));
  END_CPP11
}
// initialize.cpp
SEXP civil_init();
extern "C" SEXP _civil_civil_init() {
  BEGIN_CPP11
    return cpp11::as_sexp(civil_init());
  END_CPP11
}
// install.cpp
void civil_set_install(SEXP path);
extern "C" SEXP _civil_civil_set_install(SEXP path) {
  BEGIN_CPP11
    civil_set_install(cpp11::as_cpp<cpp11::decay_t<SEXP>>(path));
    return R_NilValue;
  END_CPP11
}
// local-datetime.cpp
SEXP localize_posixct_cpp(SEXP x);
extern "C" SEXP _civil_localize_posixct_cpp(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(localize_posixct_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// local-datetime.cpp
SEXP unlocalize_cpp(SEXP x, SEXP zone, SEXP dst_resolver);
extern "C" SEXP _civil_unlocalize_cpp(SEXP x, SEXP zone, SEXP dst_resolver) {
  BEGIN_CPP11
    return cpp11::as_sexp(unlocalize_cpp(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(zone), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dst_resolver)));
  END_CPP11
}
// zone.cpp
SEXP zone_standardize(SEXP zone);
extern "C" SEXP _civil_zone_standardize(SEXP zone) {
  BEGIN_CPP11
    return cpp11::as_sexp(zone_standardize(cpp11::as_cpp<cpp11::decay_t<SEXP>>(zone)));
  END_CPP11
}
// zone.cpp
SEXP zone_is_valid(SEXP zone);
extern "C" SEXP _civil_zone_is_valid(SEXP zone) {
  BEGIN_CPP11
    return cpp11::as_sexp(zone_is_valid(cpp11::as_cpp<cpp11::decay_t<SEXP>>(zone)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _civil_add_duration_to_zoned_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _civil_add_period_to_local_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _civil_add_period_to_zoned_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _civil_adjust_local_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _civil_adjust_zone_retain_clock_cpp(SEXP, SEXP, SEXP);
extern SEXP _civil_adjust_zoned_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _civil_civil_init();
extern SEXP _civil_civil_set_install(SEXP);
extern SEXP _civil_localize_posixct_cpp(SEXP);
extern SEXP _civil_unlocalize_cpp(SEXP, SEXP, SEXP);
extern SEXP _civil_zone_is_valid(SEXP);
extern SEXP _civil_zone_standardize(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_civil_add_duration_to_zoned_cpp",    (DL_FUNC) &_civil_add_duration_to_zoned_cpp,    4},
    {"_civil_add_period_to_local_cpp",      (DL_FUNC) &_civil_add_period_to_local_cpp,      5},
    {"_civil_add_period_to_zoned_cpp",      (DL_FUNC) &_civil_add_period_to_zoned_cpp,      6},
    {"_civil_adjust_local_cpp",             (DL_FUNC) &_civil_adjust_local_cpp,             5},
    {"_civil_adjust_zone_retain_clock_cpp", (DL_FUNC) &_civil_adjust_zone_retain_clock_cpp, 3},
    {"_civil_adjust_zoned_cpp",             (DL_FUNC) &_civil_adjust_zoned_cpp,             6},
    {"_civil_civil_init",                   (DL_FUNC) &_civil_civil_init,                   0},
    {"_civil_civil_set_install",            (DL_FUNC) &_civil_civil_set_install,            1},
    {"_civil_localize_posixct_cpp",         (DL_FUNC) &_civil_localize_posixct_cpp,         1},
    {"_civil_unlocalize_cpp",               (DL_FUNC) &_civil_unlocalize_cpp,               3},
    {"_civil_zone_is_valid",                (DL_FUNC) &_civil_zone_is_valid,                1},
    {"_civil_zone_standardize",             (DL_FUNC) &_civil_zone_standardize,             1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_civil(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
