% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arithmetic.R
\name{civil-local-arithmetic}
\alias{civil-local-arithmetic}
\alias{add_years.civil_local}
\alias{subtract_years.civil_local}
\alias{add_months.civil_local}
\alias{subtract_months.civil_local}
\alias{add_years_and_months.civil_local}
\alias{subtract_years_and_months.civil_local}
\alias{add_weeks.civil_local}
\alias{subtract_weeks.civil_local}
\alias{add_days.civil_local}
\alias{subtract_days.civil_local}
\alias{add_hours.civil_local}
\alias{subtract_hours.civil_local}
\alias{add_minutes.civil_local}
\alias{subtract_minutes.civil_local}
\alias{add_seconds.civil_local}
\alias{subtract_seconds.civil_local}
\title{Local date-time arithmetic}
\usage{
\method{add_years}{civil_local}(x, n, ..., day_nonexistent = "last-time")

\method{subtract_years}{civil_local}(x, n, ..., day_nonexistent = "last-time")

\method{add_months}{civil_local}(x, n, ..., day_nonexistent = "last-time")

\method{subtract_months}{civil_local}(x, n, ..., day_nonexistent = "last-time")

\method{add_years_and_months}{civil_local}(x, years, months, ..., day_nonexistent = "last-time")

\method{subtract_years_and_months}{civil_local}(x, years, months, ..., day_nonexistent = "last-time")

\method{add_weeks}{civil_local}(x, n, ...)

\method{subtract_weeks}{civil_local}(x, n, ...)

\method{add_days}{civil_local}(x, n, ...)

\method{subtract_days}{civil_local}(x, n, ...)

\method{add_hours}{civil_local}(x, n, ...)

\method{subtract_hours}{civil_local}(x, n, ...)

\method{add_minutes}{civil_local}(x, n, ...)

\method{subtract_minutes}{civil_local}(x, n, ...)

\method{add_seconds}{civil_local}(x, n, ...)

\method{subtract_seconds}{civil_local}(x, n, ...)
}
\arguments{
\item{x}{\verb{[local_date / local_datetime]}

A local date-time vector.}

\item{n}{\verb{[integer]}

An integer vector representing the number of units to add to or
subtract from \code{x}.}

\item{...}{These dots are for future extensions and must be empty.}

\item{day_nonexistent}{\verb{[character(1)]}

Control the behavior when a nonexistent day is generated.
\itemize{
\item \code{"last-time"}: Adjust to the last possible time of the current month.
\item \code{"first-time"}: Adjust to the first possible time of the following month.
\item \code{"last-day"}: Adjust to the last day of the current month. For
date-times, the sub-daily components are kept.
\item \code{"first-day"}: Adjust to the first day of the following month. For
date-times, the sub-daily components are kept.
\item \code{"NA"}: Replace the nonexistent date with \code{NA}.
\item \code{"error"}: Error on nonexistent dates.
}

\emph{Warning}: When used in arithmetic with date-times, \code{"last-day"} and
\code{"first-day"} do not guarantee that the relative ordering of \code{x} is
maintained.}
}
\description{
Local arithmetic involves adding or subtracting units of time from a datetime
that is independent of any time zone. This means that daylight savings time
is never an issue while working with a local datetime. Usually, you will
convert to a local datetime with \code{\link[=localize]{localize()}}, perform multiple arithmetic
operations or adjustments with it, then convert it back to a zoned datetime
with \code{\link[=unlocalize]{unlocalize()}}.

Local arithmetic is usually appropriate when performing multiple arithmetic
operations in a row (like adding a set of years, months, and days). The
alternative is \link[=civil-zoned-arithmetic]{zoned arithmetic}, which is simpler
and more straightforward when you just need to perform a single operation
(like just adding 3 months).
}
\section{Nonexistent Days}{

Local datetimes are unique because they are allowed to land on \emph{nonexistent
days}. These might occur from adding 1 month to \code{"1971-01-29"}, which
theoretically lands on \code{"1971-02-29"}, a nonexistent day. With zoned
arithmetic, you are immediately forced to make a decision on how to handle
this nonexistent day. With local arithmetic, that decision is delayed,
allowing you precise control over how to handle this case. As an example, you
might choose to add 1 year to this nonexistent date, resulting in
\code{"1972-02-29"}, which does exist due to it being a leap year. Or you might
convert it back to a zoned date with \code{\link[=unlocalize]{unlocalize()}}, which forces you
to deal with the nonexistent date using the \code{day_nonexistent} argument.
The default would choose the last real day in February of that year,
resulting in \code{"1971-02-28"}.

There are operations that force you to resolve nonexistent days. Using
\code{add_days()}, \code{add_hours()}, \code{add_minutes()}, or \code{add_seconds()} will
force you to resolve the nonexistent day by using the \code{day_nonexistent}
argument. After the nonexistent day has been resolved, the unit of time
is added.
}

