% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tokens.R
\name{civil-formats}
\alias{civil-formats}
\alias{fmt_ym}
\alias{fmt_ymd}
\alias{fmt_hms}
\alias{fmt_ymd_hms}
\alias{fmt_week_date}
\alias{fmt_ordinal_date}
\alias{fmt_iso_week_date}
\alias{fmt_iso_date}
\alias{fmt_iso_datetime}
\alias{fmt_local_year_month}
\alias{fmt_local_date}
\alias{fmt_local_datetime}
\alias{fmt_local_nano_datetime}
\alias{fmt_zoned_datetime}
\alias{fmt_zoned_nano_datetime}
\title{Common date-time formats}
\usage{
fmt_ym(..., year = tkn_year(), month = tkn_month(), sep = "-")

fmt_ymd(
  ...,
  year = tkn_year(),
  month = tkn_month(),
  day = tkn_day(),
  sep = "-"
)

fmt_hms(
  ...,
  hour = tkn_hour(),
  minute = tkn_minute(),
  second = tkn_second(),
  sep = ":"
)

fmt_ymd_hms(..., ymd = fmt_ymd(), hms = fmt_hms(), sep = "T")

fmt_week_date()

fmt_ordinal_date()

fmt_iso_week_date()

fmt_iso_date()

fmt_iso_datetime(..., colon = TRUE, extended = FALSE)

fmt_local_year_month()

fmt_local_date()

fmt_local_datetime()

fmt_local_nano_datetime()

fmt_zoned_datetime(..., colon = TRUE, extended = FALSE)

fmt_zoned_nano_datetime(..., colon = TRUE, extended = FALSE)
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{year}{\verb{[character(1)]}

The token to use to represent the year.}

\item{month}{\verb{[character(1)]}

The token to use to represent the month.}

\item{sep}{\verb{[character(1)]}

The separator to use between tokens.}

\item{day}{\verb{[character(1)]}

The token to use to represent the day of the month.}

\item{hour}{\verb{[character(1)]}

The token to use to represent the hour.}

\item{minute}{\verb{[character(1)]}

The token to use to represent the minute.}

\item{second}{\verb{[character(1)]}

The token to use to represent the second.}

\item{ymd}{\verb{[character(1)]}

The format to use to represent the year, month, and day.}

\item{hms}{\verb{[character(1)]}

The format to use to represent the hour, minute, and second.}

\item{colon}{\verb{[logical(1)]}

If \code{TRUE}, a \code{":"} will be added between the hours and minutes of the
zone offset.}

\item{extended}{\verb{[logical(1)]}

If \code{TRUE}, an extension to the ISO-8601 standard datetime format is used.
This extension adds the time zone name or abbreviation to the end of the
standard format as \verb{[\%Z]}.

This is most useful with the \code{format()} method for civil's zoned datetimes,
as it will generate a textual representation of a zoned datetime that can
be unambiguously parsed back into the original object.}
}
\description{
These functions are pre-generated formats created from combining multiple
\link[=civil-tokens]{tokens} with \code{\link[=tkns]{tkns()}}. You can use them directly as \code{format}s
in \code{format()} for civil classes or Date and POSIXct objects.
}
\examples{
fmt_ymd_hms()

x <- as.Date("2018-12-31")

# ISO weeks are counted differently from normal weeks!
format(x, fmt_week_date())
format(x, fmt_iso_week_date())

# Date that is "ambiguous" without more information about the DST offset
x <- zoned_datetime(
  1970, 10, 25, 01, 30,
  zone = "America/New_York",
  dst_ambiguous = c("earliest", "latest")
)
x

# The default ISO datetime format is incomplete because we don't know which
# time zone we came from
format(x, format = fmt_iso_datetime())

# The default print method for POSIXct isn't much better, because the
# time zone abbreviation of "EST" is used by multiple different time zones,
# not just "America/New_York".
format(as.POSIXct(x), usetz = TRUE)

# The only way to fully capture the date-time information is to use the
# extended format that prints out both the UTC offset and the time zone name.
format(x, format = fmt_iso_datetime(extended = TRUE))
}
