% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/naive-time.R
\name{as-zoned-time-naive-time}
\alias{as-zoned-time-naive-time}
\alias{as_zoned_time.clock_naive_time}
\title{Convert to a zoned-time from a naive-time}
\usage{
\method{as_zoned_time}{clock_naive_time}(x, zone, ..., nonexistent = "error", ambiguous = "error")
}
\arguments{
\item{x}{\verb{[clock_naive_time]}

A naive-time to convert to a zoned-time.}

\item{zone}{\verb{[character(1)]}

The zone to convert to.}

\item{...}{These dots are for future extensions and must be empty.}

\item{nonexistent}{\verb{[character]}

One of the following nonexistent time resolution strategies:
\itemize{
\item \code{"roll-forward"}: The next valid instant in time.
\item \code{"roll-backward"}: The previous valid instant in time.
\item \code{"shift-forward"}: Shift the nonexistent time forward by the size of
the daylight saving time gap.
\item \verb{"shift-backward}: Shift the nonexistent time backward by the size of
the daylight saving time gap.
\item \code{"NA"}: Replace nonexistent times with \code{NA}.
\item \code{"error"}: Error on nonexistent times.
}

Allowed to be either length 1, or the same length as the input.

Using either \code{"roll-forward"} or \code{"roll-backward"} is generally
recommended over shifting, as these two strategies maintain the
\emph{relative ordering} between elements of the input.}

\item{ambiguous}{\verb{[character]}

One of the following ambiguous time resolution strategies:
\itemize{
\item \code{"earliest"}: Of the two possible times, choose the earliest one.
\item \code{"latest"}: Of the two possible times, choose the latest one.
\item \code{"NA"}: Replace ambiguous times with \code{NA}.
\item \code{"error"}: Error on ambiguous times.
}

Allowed to be either length 1, or the same length as the input.}
}
\value{
A zoned-time vector.
}
\description{
Converting to a zoned-time from a naive-time retains the printed time,
but changes the underlying duration, depending on the \code{zone} that you choose.

Naive-times are time points with a yet-to-be-determined time zone. By
converting them to a zoned-time, all you are doing is specifying that
time zone while attempting to keep all other printed information the
same (if possible).

If you want to retain the underlying duration, try converting to a zoned-time
\link[=as-zoned-time-sys-time]{from a sys-time}, which is a time point
interpreted as having a UTC time zone.
}
\section{Daylight Saving Time}{


Converting from a naive-time to a zoned-time is not always possible due to
daylight saving time issues. There are two types of these issues:

\emph{Nonexistent} times are the result of daylight saving time "gaps".
For example, in the America/New_York time zone, there was a daylight
saving time gap 1 second after \code{"2020-03-08 01:59:59"}, where the clocks
changed from \code{01:59:59 -> 03:00:00}, completely skipping the 2 o'clock hour.
This means that if you had a naive time of \code{"2020-03-08 02:30:00"}, you
couldn't convert that straight into a zoned-time with this time zone. To
resolve these issues, the \code{nonexistent} argument can be used to specify
one of many nonexistent time resolution strategies.

\emph{Ambiguous} times are the result of daylight saving time "fallbacks".
For example, in the America/New_York time zone, there was a daylight
saving time fallback 1 second after \code{"2020-11-01 01:59:59 EDT"}, at which
point the clocks "fell backwards" by 1 hour, resulting in a printed time of
\code{"2020-11-01 01:00:00 EST"} (note the EDT->EST shift). This resulted in two
1 o'clock hours for this day, so if you had a naive time of
\code{"2020-11-01 01:30:00"}, you wouldn't be able to convert that directly
into a zoned-time with this time zone, as there is no way for clock to know
which of the two ambiguous times you wanted. To resolve these issues,
the \code{ambiguous} argument can be used to specify one of many ambiguous
time resolution strategies.
}

\examples{
x <- as_naive_time(year_month_day(2019, 1, 1))

# Converting a naive-time to a zoned-time generally retains the
# printed time, while changing the underlying duration.
as_zoned_time(x, "America/New_York")
as_zoned_time(x, "America/Los_Angeles")

# ---------------------------------------------------------------------------
# Nonexistent time:

new_york <- "America/New_York"

# There was a daylight saving gap in the America/New_York time zone on
# 2020-03-08 01:59:59 -> 03:00:00, which means that one of these
# naive-times don't exist in that time zone. By default, attempting to
# convert it to a zoned time will result in an error.
nonexistent_time <- year_month_day(2020, 03, 08, c(02, 03), c(45, 30), 00)
nonexistent_time <- as_naive_time(nonexistent_time)
try(as_zoned_time(nonexistent_time, new_york))

# Resolve this by specifying a nonexistent time resolution strategy
as_zoned_time(nonexistent_time, new_york, nonexistent = "roll-forward")
as_zoned_time(nonexistent_time, new_york, nonexistent = "roll-backward")

# Note that rolling backwards will choose the last possible moment in
# time at the current precision of the input
nonexistent_nanotime <- time_point_cast(nonexistent_time, "nanosecond")
nonexistent_nanotime
as_zoned_time(nonexistent_nanotime, new_york, nonexistent = "roll-backward")

# A word of caution - Shifting does not guarantee that the relative ordering
# of the input is maintained
shifted <- as_zoned_time(nonexistent_time, new_york, nonexistent = "shift-forward")
shifted
# 02:45:00 < 03:30:00
nonexistent_time[1] < nonexistent_time[2]
# 03:45:00 > 03:30:00 (relative ordering is lost)
shifted[1] < shifted[2]

# ---------------------------------------------------------------------------
# Ambiguous time:

new_york <- "America/New_York"

# There was a daylight saving time fallback in the America/New_York time
# zone on 2020-11-01 01:59:59 EDT -> 2020-11-01 01:00:00 EST, resulting
# in two 1 o'clock hours. This means that the following naive time is
# ambiguous since we don't know which of the two 1 o'clocks it belongs to.
# By default, attempting to convert it to a zoned time will result in an
# error.
ambiguous_time <- year_month_day(2020, 11, 01, 01, 30, 00)
ambiguous_time <- as_naive_time(ambiguous_time)
try(as_zoned_time(ambiguous_time, new_york))

# Resolve this by specifying an ambiguous time resolution strategy
as_zoned_time(ambiguous_time, new_york, ambiguous = "earliest")
as_zoned_time(ambiguous_time, new_york, ambiguous = "latest")
as_zoned_time(ambiguous_time, new_york, ambiguous = "NA")
}
