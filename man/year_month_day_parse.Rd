% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gregorian-year-month-day.R
\name{year_month_day_parse}
\alias{year_month_day_parse}
\title{Parse into a year-month-day calendar}
\usage{
year_month_day_parse(
  x,
  ...,
  format = NULL,
  precision = "day",
  locale = clock_locale()
)
}
\arguments{
\item{x}{\verb{[character]}

A character vector to parse.}

\item{...}{These dots are for future extensions and must be empty.}

\item{format}{\verb{[character / NULL]}

A format string.

Multiple format strings can be supplied, and they will be tried in the
order they are provided.

If \code{NULL}, a default format string is chosen based on the \code{precision}.
The default format string is chosen to parse the result of calling
\code{format()} on a year-month-day object. For example, with
\code{precision = "month"}, \code{format} would be set to \verb{"\%Y-\%m}, and with
\code{precision = "millisecond"} it would be set to \code{"\%Y-\%m-\%d \%H:\%M:\%S"}.}

\item{precision}{\verb{[character(1)]}

The precision of the resulting year-month-day.}

\item{locale}{\verb{[clock_locale]}

A locale object created by \code{\link[=clock_locale]{clock_locale()}}.}
}
\value{
A year-month-day calendar vector. If a parsing fails, \code{NA} is
returned.
}
\description{
\code{year_month_day_parse()} parses a character vector into a year-month-day
calendar.
}
\examples{
x <- "2019-01-01"

# Default parses at day precision
year_month_day_parse(x)

# Can parse at less precise precisions too
year_month_day_parse(x, precision = "month")
year_month_day_parse(x, precision = "year")

# Even invalid dates can be round-tripped through format<->parse calls
invalid <- year_month_day(2019, 2, 30)
year_month_day_parse(format(invalid))

# Can parse with time of day
x <- year_month_day(
  2019, 01, 30, 02, 30, 00, 5000,
  subsecond_precision = "nanosecond"
)

year_month_day_parse(format(x), precision = "nanosecond")

# Can parse using multiple format strings, which will be tried
# in the order they are provided
x <- c("2019-01-01", "2020-01-01", "2021/2/3")
formats <- c("\%Y-\%m-\%d", "\%Y/\%m/\%d")
year_month_day_parse(x, format = formats)

# Can parse using other format tokens as well
year_month_day_parse(
  "January, 2019",
  format = "\%B, \%Y",
  precision = "month"
)

# Parsing a French year-month-day
year_month_day_parse(
  "octobre 1, 2000",
  format = "\%B \%d, \%Y",
  locale = clock_locale("fr")
)
}
