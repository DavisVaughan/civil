% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/posixt.R
\name{posixt-group}
\alias{posixt-group}
\alias{date_group.POSIXt}
\title{Group date-time components}
\usage{
\method{date_group}{POSIXt}(
  x,
  precision,
  ...,
  n = 1L,
  invalid = "error",
  nonexistent = "error",
  ambiguous = "error"
)
}
\arguments{
\item{x}{\verb{[POSIXct / POSIXlt]}

A date-time vector.}

\item{precision}{\verb{[character(1)]}

One of:
\itemize{
\item \code{"year"}
\item \code{"month"}
\item \code{"day"}
\item \code{"hour"}
\item \code{"minute"}
\item \code{"second"}
}}

\item{...}{These dots are for future extensions and must be empty.}

\item{n}{\verb{[positive integer(1)]}

A single positive integer specifying a multiple of \code{precision} to use.}

\item{invalid}{\verb{[character(1)]}

One of the following invalid resolution strategies:
\itemize{
\item \code{"previous"}: The previous valid instant in time.
\item \code{"previous-day"}: The previous valid day in time, keeping the time of
day.
\item \code{"next"}: The next valid instant in time.
\item \code{"next-day"}: The next valid day in time, keeping the time of day.
\item \code{"overflow"}: Overflow by the number of days that \code{x} is invalid by.
Time of day is dropped.
\item \code{"overflow-day"}: Overflow by the number of days that \code{x} is invalid by.
Time of day is kept.
\item \code{"NA"}: Replace invalid dates with \code{NA}.
\item \code{"error"}: Error on invalid dates.
}}

\item{nonexistent}{\verb{[character]}

One of the following nonexistent time resolution strategies:
\itemize{
\item \code{"roll-forward"}: The next valid instant in time.
\item \code{"roll-backward"}: The previous valid instant in time.
\item \code{"shift-forward"}: Shift the nonexistent time forward by the size of
the daylight saving time gap.
\item \verb{"shift-backward}: Shift the nonexistent time backward by the size of
the daylight saving time gap.
\item \code{"NA"}: Replace nonexistent times with \code{NA}.
\item \code{"error"}: Error on nonexistent times.
}

Allowed to be either length 1, or the same length as the input.

Using either \code{"roll-forward"} or \code{"roll-backward"} is generally
recommended over shifting, as these two strategies maintain the
\emph{relative ordering} between elements of the input.}

\item{ambiguous}{\verb{[character]}

One of the following ambiguous time resolution strategies:
\itemize{
\item \code{"earliest"}: Of the two possible times, choose the earliest one.
\item \code{"latest"}: Of the two possible times, choose the latest one.
\item \code{"NA"}: Replace ambiguous times with \code{NA}.
\item \code{"error"}: Error on ambiguous times.
}

Allowed to be either length 1, or the same length as the input.}
}
\value{
\code{x}, grouped at \code{precision}.
}
\description{
\code{date_group()} groups by a single component of a date-time, such as month
of the year, day of the month, or hour of the day.

If you need to group by more complex components, like ISO weeks, or quarters,
convert to a calendar type that contains the component you are interested
in grouping by.
}
\examples{
x <- as.POSIXct("2019-01-01", "America/New_York")
x <- add_days(x, -3:5)

# Group by 2 days of the current month.
# Note that this resets at the beginning of the month, creating day groups
# of [29, 30] [31] [01, 02] [03, 04].
date_group(x, "day", n = 2)

# Group by month
date_group(x, "month")

# Group by hour of the day
y <- as.POSIXct("2019-12-30", "America/New_York")
y <- add_hours(y, 0:12)
y

date_group(y, "hour", n = 3)
}
