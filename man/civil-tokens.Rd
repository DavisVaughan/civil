% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tokens.R
\name{civil-tokens}
\alias{civil-tokens}
\alias{tkn_weekday_name}
\alias{tkn_month_name}
\alias{tkn_date_and_time}
\alias{tkn_century}
\alias{tkn_day}
\alias{tkn_iso_year}
\alias{tkn_hour}
\alias{tkn_day_of_year}
\alias{tkn_month}
\alias{tkn_minute}
\alias{tkn_newline}
\alias{tkn_am_pm}
\alias{tkn_time}
\alias{tkn_second}
\alias{tkn_tab}
\alias{tkn_iso_weekday}
\alias{tkn_weeknum}
\alias{tkn_iso_weeknum}
\alias{tkn_weekday}
\alias{tkn_year}
\alias{tkn_offset}
\alias{tkn_zone}
\alias{tkn_percent}
\title{Tokens for date-time formatting}
\usage{
tkn_weekday_name(..., abbreviate = FALSE)

tkn_month_name(..., abbreviate = FALSE)

tkn_date_and_time(..., locale_era = FALSE)

tkn_century(..., locale_era = FALSE)

tkn_day(..., pad = "zero", locale_num = FALSE)

tkn_iso_year(..., short = FALSE)

tkn_hour(..., twelve = FALSE, locale_num = FALSE)

tkn_day_of_year()

tkn_month(..., locale_num = FALSE)

tkn_minute()

tkn_newline()

tkn_am_pm()

tkn_time(..., twelve = FALSE)

tkn_second(..., locale_num = FALSE)

tkn_tab()

tkn_iso_weekday(..., locale_num = FALSE)

tkn_weeknum(..., locale_num = FALSE, week_start_sunday = TRUE)

tkn_iso_weeknum(..., locale_num = FALSE)

tkn_weekday(..., locale_num = FALSE)

tkn_year(..., short = FALSE)

tkn_offset(..., colon = TRUE)

tkn_zone()

tkn_percent()
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{abbreviate}{\verb{[logical(1)]}

Should the abbreviated version of this token be used?}

\item{locale_era}{\verb{[logical(1)]}

Should the alternative locale-dependent era format be used? This prepends
an \code{E} before the standard token (i.e. \verb{\%EY} rather than \verb{\%Y}).}

\item{pad}{\verb{[character(1)]}

One of \code{"zero"} or \code{"space"}, specifying how to pad days of the month that
have a single digit. For example, \code{"1"} would be padded to \code{"01"} or \code{" 1"}.}

\item{locale_num}{\verb{[logical(1)]}

Should the alternative locale-dependent number format be used? This prepends
an \code{O} before the standard token (i.e. \verb{\%OH} rather than \verb{\%H}).}

\item{short}{\verb{[logical(1)]}

If \code{TRUE}, a two digit year will be printed.

If \code{FALSE}, a year with at least 4 digits will be printed.}

\item{twelve}{\verb{[logical(1)]}

If \code{TRUE}, a 12-hour clock will be used.

If \code{FALSE}, a 24-hour clock will be used.}

\item{week_start_sunday}{\verb{[logical(1)]}

If \code{TRUE}, the week starts on Sunday, which is the US convention.

If \code{FALSE}, the week starts on Monday, which is the UK convention.}

\item{colon}{\verb{[logical(1)]}

If \code{TRUE}, a \code{":"} will be added between the hours and minutes of the
zone offset.}
}
\description{
This page contains a number of tokens that can be used for date-time
formatting through \code{format(format = )}. All tokens are supported for
formatting a civil class (such as \code{\link[=year_month_day]{year_month_day()}} or \code{\link[=zoned_datetime]{zoned_datetime()}}).
Most tokens are supported for formatting a POSIXct or Date, but some may
be specific to the formatting implementation used by civil.

Calling any of these functions simply returns the corresponding string
for that token.

There are also pre-generated formats for the most common cases, like
\code{\link[=fmt_ymd_hms]{fmt_ymd_hms()}}. If you need to generate a custom format, multiple tokens
can be combined together using \code{tkns()}. You can also use \code{glue::glue()},
which can often be more readable.
}
\examples{
# Tokens are just strings that start with a `\%`.
tkn_day()
tkn_weekday()

# Multiple tokens can be combined with `tkns()` to create custom formats
hms <- tkns(tkn_hour(), tkn_minute(), tkn_second(), sep = ":")

# Formats created by tokens can be used in the format method of civil
# classes and base R date-time classes
x <- naive_datetime(2019, 01, 01, 14, 30, 59)
x

format(x, format = hms)
format(x, format = tkn_time(twelve = TRUE))

x_ct <- as.POSIXct(x, tz = "America/New_York")

format(x_ct, format = hms)
}
